package com.diffblue.javademo;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class TicTacToeTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: TicTacToe */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe__init__bad5826b9efe25e7_000() throws Throwable {

    com.diffblue.javademo.TicTacToe instance;
    {
      /* Act */
      /* Creating object to test constructor */
      instance = new com.diffblue.javademo.TicTacToe();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 21
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_000() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{  };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)-1, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 11 (line 32)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_001() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)18, (byte)2, (byte)2, (byte)1, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)-1, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 11 (line 32)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_002() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)-126, (byte)2, (byte)1, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)-1, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 7 (line 28)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 11 (line 32)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_003() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)2, (byte)0, (byte)1, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)-1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 28
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 28
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 7
   * conditional line 27 branch to line 28
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * conditional line 37 branch to line 38
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_004() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)1, (byte)1, (byte)1, (byte)2, (byte)1, (byte)0, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)-1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 28
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 7
   * conditional line 27 branch to line 28
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 63
   * conditional line 63 branch to line 72
   * conditional line 72 branch to line 72
   * conditional line 72 branch to line 73
   * conditional line 73 branch to line 74
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_005() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)1, (byte)2, (byte)1, (byte)2, (byte)1, (byte)2, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 7
   * conditional line 27 branch to line 28
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 45
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 72
   * conditional line 72 branch to line 72
   * conditional line 72 branch to line 73
   * conditional line 73 branch to line 74
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_006() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)0, (byte)1, (byte)2, (byte)1, (byte)0, (byte)1, (byte)0, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 28
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 3
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 4
   * conditional line 27 branch to line 28
   * iteration 5
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 6
   * conditional line 27 branch to line 28
   * iteration 7
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 8
   * conditional line 27 branch to line 28
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 45
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 45
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 72
   * conditional line 72 branch to line 72
   * conditional line 72 branch to line 73
   * conditional line 73 branch to line 75
   * conditional line 75 branch to line 76
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_007() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)2, (byte)2, (byte)1, (byte)2, (byte)1, (byte)2, (byte)1, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)2, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 5 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 7 (line 28)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 13 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 15 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 16 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 18 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 19 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 20 (line 46)
   * This test covers `byte checkTicTacToePosition(byte [])' block 22 (line 48)
   * This test covers `byte checkTicTacToePosition(byte [])' block 23 (line 49)
   * This test covers `byte checkTicTacToePosition(byte [])' block 24 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 30 (line 44)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_008() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)2, (byte)1, (byte)0, (byte)2, (byte)2, (byte)1, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)2, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 5 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 7 (line 28)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 13 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 15 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 16 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 18 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 19 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 20 (line 46)
   * This test covers `byte checkTicTacToePosition(byte [])' block 21 (line 47)
   * This test covers `byte checkTicTacToePosition(byte [])' block 22 (line 48)
   * This test covers `byte checkTicTacToePosition(byte [])' block 24 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 30 (line 44)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_009() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)0, (byte)1, (byte)2, (byte)0, (byte)1, (byte)0, (byte)0, (byte)1 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 7
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 9
   * conditional line 27 branch to line 28
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 45
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 72
   * conditional line 72 branch to line 72
   * conditional line 72 branch to line 81
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00a() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)0, (byte)1, (byte)2, (byte)1, (byte)0, (byte)0, (byte)0, (byte)1 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)0, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 7
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 53
   * conditional line 53 branch to line 54
   * conditional line 54 branch to line 56
   * conditional line 56 branch to line 44
   * conditional line 63 branch to line 72
   * conditional line 72 branch to line 72
   * conditional line 72 branch to line 81
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00b() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)0, (byte)2, (byte)1, (byte)2, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)0, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 28
   * iteration 2
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 3
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 4
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 5
   * conditional line 27 branch to line 28
   * iteration 6
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 7
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 31
   * conditional line 31 branch to line 26
   * iteration 9
   * conditional line 27 branch to line 28
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 63
   * conditional line 63 branch to line 64
   * conditional line 64 branch to line 65
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00c() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)2, (byte)2, (byte)1, (byte)0, (byte)0, (byte)0, (byte)1 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)1, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 5 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 7 (line 28)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 13 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 15 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 16 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 18 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 24 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 25 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 26 (line 54)
   * This test covers `byte checkTicTacToePosition(byte [])' block 28 (line 56)
   * This test covers `byte checkTicTacToePosition(byte [])' block 29 (line 57)
   * This test covers `byte checkTicTacToePosition(byte [])' block 30 (line 44)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00d() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)1, (byte)2, (byte)1, (byte)0, (byte)2, (byte)2, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)2, retval);
    }
  }

  /*
   * This test covers `byte checkTicTacToePosition(byte [])' block 1 (line 20)
   * This test covers `byte checkTicTacToePosition(byte [])' block 3 (line 25)
   * This test covers `byte checkTicTacToePosition(byte [])' block 4 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 5 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 6 (line 27)
   * This test covers `byte checkTicTacToePosition(byte [])' block 7 (line 28)
   * This test covers `byte checkTicTacToePosition(byte [])' block 8 (line 29)
   * This test covers `byte checkTicTacToePosition(byte [])' block 9 (line 30)
   * This test covers `byte checkTicTacToePosition(byte [])' block 10 (line 31)
   * This test covers `byte checkTicTacToePosition(byte [])' block 12 (line 26)
   * This test covers `byte checkTicTacToePosition(byte [])' block 13 (line 37)
   * This test covers `byte checkTicTacToePosition(byte [])' block 15 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 16 (line 44)
   * This test covers `byte checkTicTacToePosition(byte [])' block 18 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 19 (line 45)
   * This test covers `byte checkTicTacToePosition(byte [])' block 24 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 25 (line 53)
   * This test covers `byte checkTicTacToePosition(byte [])' block 26 (line 54)
   * This test covers `byte checkTicTacToePosition(byte [])' block 27 (line 55)
   * This test covers `byte checkTicTacToePosition(byte [])' block 30 (line 44)
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00e() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)1, (byte)0, (byte)0, (byte)1, (byte)1, (byte)1, (byte)2, (byte)2, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)1, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 20 branch to line 25
   * com/diffblue/javademo/TicTacToe.java:26: loop: 9 iterations
   * iteration 1
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 2
   * conditional line 27 branch to line 28
   * iteration 3
   * conditional line 27 branch to line 28
   * iteration 4
   * conditional line 27 branch to line 28
   * iteration 5
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 6
   * conditional line 27 branch to line 28
   * iteration 7
   * conditional line 27 branch to line 28
   * iteration 8
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * iteration 9
   * conditional line 27 branch to line 29
   * conditional line 29 branch to line 30
   * conditional line 37 branch to line 37
   * conditional line 37 branch to line 44
   * com/diffblue/javademo/TicTacToe.java:44: loop: 3 iterations
   * iteration 1
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 2
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * iteration 3
   * conditional line 45 branch to line 45
   * conditional line 45 branch to line 53
   * conditional line 53 branch to line 44
   * conditional line 63 branch to line 63
   * conditional line 63 branch to line 64
   * conditional line 64 branch to line 66
   * conditional line 66 branch to line 67
   */

  @org.junit.Test
  public void com_diffblue_javademo_TicTacToe_checkTicTacToePosition_d89b300c6c3e2a4_00f() throws Throwable {

    byte retval;
    {
      /* Arrange */
      com.diffblue.javademo.TicTacToe param_3 = (com.diffblue.javademo.TicTacToe) Reflector.getInstance("com.diffblue.javademo.TicTacToe");
      byte [] dynamic_2_array = new byte []{ (byte)2, (byte)1, (byte)1, (byte)1, (byte)2, (byte)1, (byte)1, (byte)2, (byte)2 };
      byte [] param_1 = dynamic_2_array;
      byte [] a = param_1;

      /* Act */
      Class<?> c = Reflector.forName("com.diffblue.javademo.TicTacToe");
      Method m = c.getDeclaredMethod("checkTicTacToePosition", Reflector.forName("byte []"));
      m.setAccessible(true);
      retval = (byte) m.invoke(param_3, a);
    }
    {
      /* Assert result */
      Assert.assertEquals((byte)2, retval);
    }
  }
}
