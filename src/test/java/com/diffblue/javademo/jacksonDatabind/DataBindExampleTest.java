package com.diffblue.javademo.jacksonDatabind;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.powermock.api.mockito.PowerMockito.mock;
import static org.powermock.api.mockito.PowerMockito.spy;
import static org.powermock.api.mockito.PowerMockito.when;


import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.rules.ExpectedException;
import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

import org.mockito.Matchers;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.junit.runner.RunWith;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;




@RunWith(PowerMockRunner.class)
public class DataBindExampleTest {

  @Test
  public void exampleTest() {
    // Arrange
    DataBindExample myExample = new DataBindExample();

    // Act
    String retval = myExample.example("foo", 10);

    // Assert
    Assert.assertEquals("{\"name\":\"foo\",\"age\":10}", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 11 branch to line 11
   */
  @org.powermock.core.classloader.annotations.PrepareForTest({com.diffblue.javademo.jacksonDatabind.DataBindExample.class})
  @org.junit.Test
  public void com_diffblue_javademo_jacksonDatabind_DataBindExample_example_5b21801d05e5ef76_000() throws Throwable {

    String retval;
    {
      /* Setup mocks */
      ArrayList<ObjectMapper> ObjectMapper_instances = new ArrayList<ObjectMapper>();
      ObjectMapper mock_instance_1;
      {
        ObjectMapper param_0 = (ObjectMapper) mock(ObjectMapper.class);
        ObjectMapper_instances.add(param_0);
        com.fasterxml.jackson.databind.ObjectMapper to_construct$11 = param_0;
        mock_instance_1 = to_construct$11;
      }
      final ArrayList<ObjectMapper> ObjectMapper_answer_list = new ArrayList<ObjectMapper>();
      final ArrayList<Object[]> ObjectMapper_expectation_list = new ArrayList<Object[]>();
      final IterAnswer ObjectMapper_answer_object = new IterAnswer<ObjectMapper>("ObjectMapper", "ObjectMapper", ObjectMapper_answer_list, ObjectMapper_expectation_list);
      ObjectMapper_answer_list.add(mock_instance_1);
      PowerMockito.whenNew(ObjectMapper.class).withAnyArguments().thenAnswer(ObjectMapper_answer_object);
      Object mock_instance_2;
      {
        String to_return$1 = "{\"name\":\"foo\",\"age\":10}";
        mock_instance_2 = to_return$1;
      }

      final ArrayList<Object> readValue_answer_list = new ArrayList<Object>();
      final ArrayList<Object[]> readValue_expectation_list = new ArrayList<Object[]>();
      final IterAnswer readValue_answer_object = new IterAnswer<Object>("ObjectMapper", "readValue", readValue_answer_list, readValue_expectation_list);
      readValue_answer_list.add(mock_instance_2);

      String mock_instance_3;
      {
        String param_3 = "foobar";
        String to_return$3 = param_3;
        mock_instance_3 = to_return$3;
      }

      final ArrayList<String> writeValueAsString_answer_list = new ArrayList<String>();
      final ArrayList<Object[]> writeValueAsString_expectation_list = new ArrayList<Object[]>();
      final IterAnswer writeValueAsString_answer_object = new IterAnswer<String>("ObjectMapper", "writeValueAsString", writeValueAsString_answer_list, writeValueAsString_expectation_list);
      writeValueAsString_answer_list.add(mock_instance_3);

      /* Arrange */
      com.diffblue.javademo.jacksonDatabind.DataBindExample param_6 = (com.diffblue.javademo.jacksonDatabind.DataBindExample) Reflector.getInstance("com.diffblue.javademo.jacksonDatabind.DataBindExample");
      String param_8 = "#####";
      String name = param_8;
      int age = 4;

      for (ObjectMapper ObjectMapper_iter : ObjectMapper_instances)
        when(ObjectMapper_iter.writeValueAsString(Matchers.isA(Object.class))).thenAnswer(writeValueAsString_answer_object);
      for (ObjectMapper ObjectMapper_iter2 : ObjectMapper_instances)
        org.mockito.Mockito.when(ObjectMapper_iter2.readValue(Matchers.isA(String.class), Matchers.isA(Class.class))).thenAnswer(readValue_answer_object);

      /* Act */
      retval = param_6.example(name, age);
    }
    {
      /* Assert result */
      //Assert.assertNotNull(retval);
      Assert.assertEquals("", retval);
    }
  }
}